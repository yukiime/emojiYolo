# YOLOv5 🚀 by Ultralytics, AGPL-3.0 license

# Parameters
nc: 17  # number of classes

# number最后要乘depth multiple
# args最后要乘channel multiple
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# anchor是一种先验框 
# 就是用先验知识所描绘的框 可以用聚类等无监督学习的方法求取
# 三个特征层级 低层 中层 高层
# 每层定义三个anchor
# 第一个是10*13 第二个16*30 第三个32*23
# 第一层例子 3次8倍下采样 2*2*2 就是特征图大小为原图1/8 一组3对，每对表示长和宽，这一组是用来检测小目标的
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2 /2意思是变成原始尺寸的1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3, [256]],
   [-1, 1, ECA, [256]], # 5
   [-1, 1, Conv, [512, 3, 2]],  # 6-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, ECA, [512]], # 8
   [-1, 1, Conv, [1024, 3, 2]],  # 9-P5/32
   [-1, 3, C3, [1024]],   # 10
   [-1, 1, SEAttention, [1024]],  # 11
   [-1, 1, SPPF, [1024, 5]],  # 12
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   # 代表从11层和7层到达
   [[-1, 7], 1, Concat, [1]],  # cat backbone P4
   [-1, 1, SimAM, [1e-4]], # 16
   [-1, 3, C3, [512, False]],  # 17

   [-1, 1, Conv, [256, 1, 1]], # 18
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 1, ShuffleAttention, [16,8]], # 21
   [-1, 3, C3, [256, False]],  # 22 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 18], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 25 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 13], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 28 (P5/32-large)

   [[22, 25, 28], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
  
# 共30层 每层四个结构
# -1代表从上一层到达
# 第二个数代表该层模块或者子模块重复次数/第二个参数是neck的个数
# Upsample上采样
# model定义在common上
# 可能在把步长为2的卷积当池化层用